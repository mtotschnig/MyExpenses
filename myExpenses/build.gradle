buildscript {
    repositories {
//        mavenLocal()
        google()
        mavenCentral()
    }
    dependencies {
//        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.2-SNAPSHOT'
    }
}

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.devtools.ksp'
    id 'org.jetbrains.kotlin.plugin.compose'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

def getPropertyIfDefined(property, defaultValue) {
    if (project.hasProperty(property)) {
        return project.properties[property]
    }
    return defaultValue
}

android {
    compileSdk project.compileSdkVersion
    useLibrary 'android.test.runner'
    useLibrary 'android.test.mock'
    useLibrary 'android.test.base'

    defaultConfig {
        applicationId "org.totschnig.myexpenses"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode project.versionCode
        versionName project.versionName

        buildConfigField "String", "DISTRIBUTION", "\"GITHUB\""
        testInstrumentationRunner "org.totschnig.myexpenses.MyTestRunner"

        resourceConfigurations = resConfig
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }

    /*signingConfigs {
        release {
            storeFile file(getPropertyIfDefined("RELEASE_STORE_FILE", "unknown"))
            storePassword getPropertyIfDefined("RELEASE_STORE_PASSWORD", "unknown")
            keyAlias getPropertyIfDefined("RELEASE_KEY_ALIAS", "unknown")
            keyPassword getPropertyIfDefined("RELEASE_KEY_PASSWORD", "unknown")

        }
    }*/

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project.txt'
            //signingConfig signingConfigs.release
            manifestPlaceholders["appName"] = "@string/app_name"
            applicationIdSuffix ""
            //ndk.debugSymbolLevel = 'FULL'
            buildConfigField "java.time.LocalDateTime", "BUILD_DATE", getDate()
        }
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders["appName"] = "My Expenses Debug"
            buildConfigField "int", "TEST_SCENARIO", getPropertyIfDefined('testScenario', "1")
            buildConfigField "java.time.LocalDateTime", "BUILD_DATE", "java.time.LocalDateTime.now()"
            buildConfigField "String", "OPEN_EXCHANGE_RATES_API_KEY", "\"" + getPropertyIfDefined('OPEN_EXCHANGE_RATES_API_KEY', "") + "\""
            buildConfigField "String", "COIN_API_API_KEY", "\"" + getPropertyIfDefined('COIN_API_API_KEY', "") + "\""
            buildConfigField "boolean", "BETA", getPropertyIfDefined("BETA", "false")
        }
    }

    buildTypes.each { type ->
        type.resValue 'string', 'application_id', defaultConfig.applicationId + type.applicationIdSuffix
        type.resValue "string", 'sync_account_type', defaultConfig.applicationId + type.applicationIdSuffix + ".sync"
    }

    flavorDimensions = [ "textRecognition" ]

    productFlavors {
        intern {
            dimension "textRecognition"
        }
        extern {
            dimension "textRecognition"
        }
    }

    packagingOptions {
        resources {
            //excludes += ['/META-INF/{AL2.0,LGPL2.1}', 'META-INF/*', '**/attach_hotspot_windows.dll', 'META-INF/licenses/**', 'META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
        jniLibs {
            excludes += ['META-INF/*', 'META-INF/licenses/**']
        }
    }

    variantFilter { variant ->
        if (project.hasProperty("buildType") && variant.buildType.name != project.ext.buildType) {
            setIgnore(true)
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            all {
                maxHeapSize = "1024m"
            }
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }
    //It does not seem possible to define dynamicFeatures dependent on variant
    //If you want to build intern variant, you need to include mlkit (+ at least one of ':mlkit_latn', ':mlkit_han', ':mlkit_deva', ':mlkit_jpan', ':mlkit_kore') and/or tesseract module
    //drive for Sync with Google Drive
    dynamicFeatures = [':ocr', ':webui', ':dropbox', ':webdav', ':sqlcrypt', ':fints', ':onedrive', ':jackson']

    lint {
        abortOnError true
        checkDependencies true
        disable 'InvalidPackage', 'MissingQuantity', 'MissingTranslation', 'ImpliedQuantity', 'Instantiatable'
    }
    namespace 'org.totschnig.myexpenses'

/*    bundle {
        packagingOptions {
            merge 'root/META-INF/services/reactor.blockhound.integration.BlockHoundIntegration'
        }
    }*/
}

kotlin.sourceSets.configureEach {
    languageSettings.optIn("kotlin.RequiresOptIn")
}

//uncomment if you want to have Android log in stdout
tasks.withType(Test).configureEach {
    systemProperty "robolectric.logging", "stdout"
}

dependencies {
    //LeakCanary leads to failure of Screengrab's LocaleUtil:
    //https://github.com/fastlane/fastlane/issues/19521#issuecomment-1170017435
    //debugImplementation libs.leakcanary.android
    api(libs.androidx.datastore.preferences)
    coreLibraryDesugaring libs.android.desugar
    implementation project(':transactionscontract')
    implementation libs.phrase
    implementation platform(libs.androidx.compose.bom)
    implementation libs.compose.ui
    implementation libs.compose.animation.graphics
    implementation libs.androidx.compose.material3
    implementation libs.compose.ui.tooling.preview
    implementation libs.androidx.activity.compose
    implementation libs.androidx.runtime.livedata
    debugImplementation libs.compose.ui.tooling
    implementation libs.androidx.material.icons.extended
    implementation libs.androidx.paging.compose
    implementation libs.accompanist.drawablepainter
    implementation libs.accompanist.themeadapter.material3
    implementation libs.donut.compose
    implementation libs.donut

    kapt libs.dagger.compiler
    implementation libs.dagger
    implementation libs.android.state
    kapt libs.android.state.processor
    implementation libs.gson

    api libs.auto.value.annotations
    kapt libs.auto.value

    kapt libs.auto.value.gson
    api libs.auto.value.gson.runtime

    kapt libs.auto.value.cursor
    implementation libs.auto.value.cursor.annotations

    kapt libs.auto.value.parcel

    implementation project(':PlayLicensingOrig')
    implementation libs.itextpdf
    api libs.acra.core
    implementation libs.acra.mail
    implementation libs.acra.dialog
    implementation libs.commons.lang3
    implementation libs.commons.csv
    api libs.commons.text
    //noinspection GradleDependency
    api libs.picasso
    implementation libs.mpandroidchart
    implementation libs.caldroid
    api libs.simpledialogfragments

    implementation libs.taptargetview

    implementation libs.commons.collections4

    api libs.timber

    implementation libs.slf4j.api
    implementation libs.logback.android

    implementation libs.androidx.appcompat
    implementation libs.androidx.legacy.support.v4
    implementation libs.androidx.recyclerview
    implementation libs.androidx.cardview
    implementation libs.androidx.viewpager2

    api libs.material

    implementation libs.androidx.gridlayout
    api project(':preferences')
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.drawer

    implementation libs.flexbox

    implementation project(path: ':setupwizard')

    //licence validation
    implementation libs.retrofit
    implementation libs.converter.gson
    implementation libs.logging.interceptor

    implementation libs.copper.flow

    //https://github.com/romandanylyk/PageIndicatorView/issues/141
    implementation libs.pageindicatorview

    implementation libs.androidx.sqlite.ktx

    // dynamic feature module compilation fails with
    //Cannot access 'com.vmadalin.easypermissions.EasyPermissions.PermissionCallbacks' which is a supertype of 'org.totschnig.myexpenses.activity.BaseActivity'
    api libs.easypermissions.ktx

    implementation(libs.kotlinx.html)
    implementation(libs.arrow.core)

    implementation libs.fontdrawable

    // Room components
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    ksp libs.androidx.room.compiler

    implementation libs.sqlite.android

    // Lifecycle components
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation(libs.androidx.lifecycle.runtime.compose)

    // ViewModel Kotlin support
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.extensions

    implementation libs.kotlinx.coroutines.android

    //implementation "androidx.activity:activity-ktx:$activity_version"
    implementation libs.androidx.fragment.ktx

    //Mlkit / Drive
    //implementation "com.google.android.gms:play-services-base:18.5.0"
    //implementation "com.google.mlkit:vision-interfaces:+"
    implementation(libs.guava)

    implementation libs.android.image.cropper
    api libs.androidx.core.ktx
    implementation libs.androidx.core.remoteviews
    implementation libs.kotlin.reflect

    implementation libs.androidx.work.runtime.ktx

    implementation libs.email.intent.builder

    implementation libs.androidx.browser

    implementation(libs.runtime)
    ksp(libs.sealed.enum)

    implementation libs.androidx.security.crypto

    implementation libs.kotlinx.serialization.json

    debugImplementation(libs.androidx.fragment.testing.manifest)
    testImplementation(libs.androidx.fragment.testing)
    androidTestImplementation(libs.androidx.fragment.testing)
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.screengrab
    androidTestImplementation libs.androidx.espresso.core
    debugImplementation libs.androidx.espresso.idling.resource
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.runner
    androidTestUtil libs.androidx.orchestrator
    androidTestImplementation libs.androidx.rules
    androidTestImplementation libs.androidx.espresso.intents
    androidTestImplementation(libs.androidx.espresso.contrib)
    //androidTestImplementation  "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    androidTestImplementation libs.mockito.android
    androidTestImplementation(libs.barista) {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
    androidTestImplementation libs.kotlin.test.junit
    androidTestImplementation libs.androidx.room.testing
    androidTestImplementation libs.compose.ui.test.junit4
    //noinspection GradleDependency
    androidTestImplementation libs.assertj.core
    androidTestImplementation libs.truth
    androidTestImplementation libs.androidx.core.testing
    androidTestImplementation(project(":shared-test"))

    testImplementation(libs.barista) {
        exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
    testImplementation libs.ui.test.junit4
    testImplementation libs.junit
    testImplementation libs.junitparams
    testImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin
    testImplementation libs.robolectric
    testImplementation libs.androidx.test.core
    testImplementation libs.assertj.core.v3190
    testImplementation libs.truth
    testImplementation libs.androidx.espresso.core
    testImplementation libs.androidx.rules
    testImplementation libs.androidx.junit
    testImplementation(project(":shared-test"))
    testImplementation libs.androidx.work.testing
    testImplementation libs.snakeyaml
}

static def getDate() {
    def date = new Date()
    def formattedDate = "java.time.LocalDateTime.of(" + date.format('yyyy,M,d,H,m') + ")"
    return formattedDate
}

//apply plugin: 'com.jakewharton.hugo'

//For Drive
//apply plugin: 'com.google.gms.google-services'

tasks.register('echoPublishTag') {
    doLast {
        def currentBranch = 'git branch --show-current'.execute().text.trim()

        if (currentBranch == 'master') {
            println "git add metadata/*/changelogs/${versionCode}.txt"
            println "git commit -m \"Release ${versionName}\""
            println "git push"
            println "git tag r${versionCode}; git push origin r${versionCode}"
        } else {
            println "Release should be built on master, current branch is $currentBranch"
        }
    }
}

configurations.configureEach {
    exclude group: 'com.google.j2objc', module: 'j2objc-annotations'
}
